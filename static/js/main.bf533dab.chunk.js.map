{"version":3,"sources":["Header/Header.jsx","db/index.js","SideBar/SideBarOption/SideBarOption.jsx","Provider/index.js","SideBar/SideBar.jsx","Chat/ChatHeader/ChatHeader.jsx","Chat/Message/Message.jsx","Chat/ChatInput/ChatInput.jsx","Chat/Chat.jsx","AppBody/AppBody.jsx","reducer/index.js","Login/Login.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","type","value","onChange","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","SideBarOption","Icon","id","title","addChannelOption","history","useHistory","onClick","channelName","prompt","collection","add","name","push","StateContext","createContext","StateProvider","reducer","initialState","children","Provider","useReducer","useStateValue","useContext","SideBar","user","useState","channels","setChannels","useEffect","onSnapshot","snapShot","docs","map","doc","data","displayName","MessageRoundedIcon","InboxIcon","DraftsIcon","BookmarkBorderIcon","PeopleAltIcon","AppsIcon","FileCopyIcon","ArrowUpwardIcon","ArrowDropDownIcon","AddIcon","channel","key","ChatHeader","Message","message","timestamp","userImage","time","Date","toDate","toUTCString","src","alt","ChatInput","channelId","input","setInput","placeholder","toLowerCase","e","target","preventDefault","FieldValue","serverTimestamp","photoURL","Chat","useParams","channelDetail","setChannelDetail","channelMessages","setChannelMessages","orderBy","index","AppBody","path","actionTypes","state","action","console","log","Login","dispatch","Button","signInWithPopup","then","result","catch","error","alert","App","basename","process","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf533dab.chunk.js","sourcesContent":["import React from 'react';\nimport AccessTimeIcon from '@material-ui/icons/AccessTime';\nimport HelpOutlineIcon from '@material-ui/icons/HelpOutline';\nimport SearchIcon from '@material-ui/icons/Search';\nimport './Header.scss';\nfunction Header() {\n    const onInputChange = () => {\n\n    }\n    return (\n        <div className=\"Header\">\n            <div className=\"Header__Left\">\n                <AccessTimeIcon />\n            </div>\n            <div className=\"Header__Search\">\n                <SearchIcon />\n                <input type=\"text\" value=\"Search Ayar Hlaine\" onChange={onInputChange}/>\n            </div>\n            <div className=\"Header__Right\">\n                <HelpOutlineIcon />\n            </div>\n        </div>\n    )\n}\n\nexport default Header\n","import firebase from 'firebase';\nconst firebaseConfig = {\n    apiKey: \"AIzaSyC92NQlLBMdwRDjAoyEWLVzFwuqPLpKrs4\",\n    authDomain: \"slack-clone-b7dfe.firebaseapp.com\",\n    databaseURL: \"https://slack-clone-b7dfe.firebaseio.com\",\n    projectId: \"slack-clone-b7dfe\",\n    storageBucket: \"slack-clone-b7dfe.appspot.com\",\n    messagingSenderId: \"247634981462\",\n    appId: \"1:247634981462:web:8e9edefd97d6ad66e601f7\"\n};\nconst app = firebase.initializeApp(firebaseConfig);\nconst db = app.firestore();\nconst auth = firebase.auth();\nconst provider = new firebase.auth.GoogleAuthProvider();\nexport { auth, provider };\nexport default db;","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport db from '../../db';\nimport './SideBarOption.scss';\nconst SideBarOption = ( { Icon, id, title, addChannelOption } ) => {\n    const history = useHistory();\n    const selectChannel = () => {\n        if(id) {\n            history.push(`/channel/${id}`);\n        }\n        else {\n            history.push(`/channel/${title}`);\n        }\n    };\n    const addChannel = () => {\n        const channelName = prompt('Create a channel');\n        if(channelName) {\n            db.collection('channels').add({\n                name: channelName,\n            });\n        }\n    };\n    return (\n        <div className=\"SideBarOption\"\n        onClick={addChannelOption ? addChannel : selectChannel}\n        >\n            { Icon &&  <Icon className=\"SideBarOption__Icon\"/> }\n            { Icon ? \n                <h3>{title}</h3> :\n                <h3 className=\"SideBarOption__Channel\"> <span className=\"SideBarOption__Hash\"> # </span> {title} </h3>\n            }\n        </div>\n    )\n}\n\nexport default SideBarOption\n","import React from 'react';\nimport { createContext, useContext, useReducer } from 'react';\n\nconst StateContext = createContext();\n\nconst StateProvider = ({reducer, initialState, children}) => (\n    <StateContext.Provider value={useReducer(reducer, initialState)}>\n        { children }\n    </StateContext.Provider>\n);\n\nconst useStateValue = () => useContext(StateContext);\n\nexport { StateContext, StateProvider, useStateValue };","import React, { useState, useEffect } from 'react';\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\nimport CreateIcon from '@material-ui/icons/Create';\nimport MessageRoundedIcon from '@material-ui/icons/MessageRounded';\nimport InboxIcon from '@material-ui/icons/Inbox';\nimport DraftsIcon from '@material-ui/icons/Drafts';\nimport BookmarkBorderIcon from '@material-ui/icons/BookmarkBorder';\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\nimport AppsIcon from '@material-ui/icons/Apps';\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport AddIcon from '@material-ui/icons/Add';\nimport db from '../db';\nimport './SideBar.scss';\nimport SideBarOption from './SideBarOption/SideBarOption';\nimport { useStateValue } from '../Provider';\nconst SideBar = () => {\n    const [{user}] = useStateValue();\n    const [channels, setChannels] = useState([]);\n    useEffect(() => {\n        db.collection('channels').onSnapshot(snapShot => {\n            setChannels(snapShot.docs.map((doc) =>  ( { id: doc.id, name: doc.data().name})))\n        });\n    },[]);\n    return (\n        <div className=\"SideBar\">\n            <div className=\"SideBar__Header\">\n                <div className=\"SideBar__Info\">\n                    <h2>Slack Clone</h2>\n                    <h3>\n                        <FiberManualRecordIcon />\n                        {user?.displayName}\n                    </h3>\n                </div>\n                <div className=\"SideBar__Message\">\n                    <CreateIcon />\n                </div>\n            </div>\n            <SideBarOption Icon={MessageRoundedIcon} title={'Threads'}/>\n            <SideBarOption Icon={InboxIcon} title={'Mentions & reactions'}/>\n            <SideBarOption Icon={DraftsIcon} title={'Drafts'}/>\n            <SideBarOption Icon={BookmarkBorderIcon} title={'Saved items'}/>\n            <SideBarOption Icon={PeopleAltIcon} title={'People & user groups'}/>\n            <SideBarOption Icon={AppsIcon} title={'Apps'}/>\n            <SideBarOption Icon={FileCopyIcon} title={'File browser'}/>\n            <SideBarOption Icon={ArrowUpwardIcon} title={'Show less'}/>\n            <hr/>\n            <SideBarOption Icon={ArrowDropDownIcon} title={'Channels'}/>\n            <hr/>\n            <SideBarOption Icon={AddIcon} title={'Add Channel'} addChannelOption={true}/>\n            {channels.map((channel) => (\n                <SideBarOption key={channel.id} id={channel.id} title={channel.name}/>\n            ))}\n        </div>\n    )\n}\n\nexport default SideBar\n","import React from 'react'\nimport StarBorderOutlinedIcon from '@material-ui/icons/StarBorderOutlined';\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\nimport './ChatHeader.scss';\nconst ChatHeader = ( { channelName }) => {\n    return (\n        <div className=\"ChatHeader\">\n            <div className=\"ChatHeader__Left\">\n                <h4 className=\"ChatHeader__ChannelName\">\n                    <strong> # {channelName}  </strong>\n                    <StarBorderOutlinedIcon />\n                </h4>\n            </div>\n            <div className=\"ChatHeader__Right\">\n                <p className=\"ChatHeader__Detail\">\n                    <InfoOutlinedIcon />\n                    Details\n                </p>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatHeader\n","import React from 'react'\nimport './Message.scss';\nconst Message = ( { message, timestamp, user, userImage }) =>{\n    const time = timestamp ? new Date(timestamp.toDate()).toUTCString() : new Date().toUTCString()\n    return (\n        <div className=\"Message\">\n            <img className=\"Message__UserImage\" src={userImage} alt={user}/>\n            <div className=\"Message__Info\">\n                <h4>\n                    {user} \n                    <span className=\"Message__Timestamp\">\n                    {time}\n                    </span>\n                </h4>\n                <p>{message}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Message\n","import React, { useState } from 'react'\nimport './ChatInput.scss';\nimport db from '../../db';\nimport firebase from 'firebase';\nimport { useStateValue } from '../../Provider';\nconst ChatInput = ( { channelName, channelId }) =>{\n    const [input, setInput] = useState('');\n    const [{ user }] = useStateValue();\n    const sendMessage = (e) => {\n        e.preventDefault();\n        if(channelId){\n            db.collection('channels').doc(channelId)\n            .collection('messages').add({\n                message: input,\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\n                user: user.displayName,\n                userImage: user.photoURL,\n            });\n            setInput('');\n        }\n    };\n    return (\n        <div className=\"ChatInput\">\n            <div className=\"ChatInput__Container\">\n                <form>\n                    <input \n                    placeholder={`Message #${channelName?.toLowerCase()}`} \n                    value={input} onChange={(e) => setInput(e.target.value)}/>\n                    <button onClick={sendMessage}>Send</button>\n                </form>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatInput\n","import React, { useEffect, useState } from 'react'\nimport './Chat.scss';\nimport ChatHeader from './ChatHeader/ChatHeader';\nimport { useParams } from 'react-router-dom';\nimport Message from './Message/Message';\nimport db from '../db';\nimport ChatInput from './ChatInput/ChatInput';\nfunction Chat() {\n    const { channelId } = useParams();\n    const [channelDetail, setChannelDetail] = useState({});\n    const [channelMessages, setChannelMessages] = useState([]);\n    useEffect(() => {\n        db.collection('channels').doc(channelId)\n        .onSnapshot(snapShot => {\n            setChannelDetail(snapShot.data());\n        });\n        db.collection('channels').doc(channelId)\n        .collection('messages')\n        .orderBy('timestamp', 'asc')\n        .onSnapshot(snapShot => {\n            setChannelMessages(snapShot.docs.map(doc => doc.data()));\n        });\n    },[channelId]);\n    return (\n        <div className=\"Chat\">\n            <ChatHeader channelName={channelDetail?.name}/>\n            <div className=\"MessageList\">\n                { channelMessages.map(({ message, user, timestamp, userImage}, index) => (\n                    <Message \n                    key={index}\n                    message={message}\n                    user={user}\n                    timestamp={timestamp}\n                    userImage={userImage}\n                    />\n                ))}\n            </div>\n            <ChatInput channelName={channelDetail?.name} channelId={channelId}/>\n        </div>\n    )\n}\n\nexport default Chat\n","import React from 'react'\nimport './AppBody.scss';\nimport SideBar from '../SideBar/SideBar';\nimport Chat from '../Chat/Chat';\nimport { Route } from 'react-router-dom';\nfunction AppBody() {\n    return (\n        <div className=\"AppBody\">\n            <SideBar />\n            <Route path={`/channel/:channelId`}>\n                <Chat />\n            </Route>\n        </div>\n    )\n}\n\nexport default AppBody\n","export const initialState = {\n    user: null,\n};\nexport const actionTypes = {\n    SET_USER: \"SET_USER\",\n};\n\nexport const reducer = (state , action) => {\n    console.log('Action ',action);\n    switch(action.type){\n        case actionTypes.SET_USER: {\n            return {\n                ...state,\n                user: action.user,\n            }\n        }\n        default: return state;\n    }\n}\n\nexport default reducer;","import React from 'react';\nimport './Login.scss';\nimport { Button } from '@material-ui/core';\nimport { auth, provider } from '../db';\nimport { useStateValue } from '../Provider';\nimport { actionTypes } from '../reducer';\nfunction Login() {\n    // eslint-disable-next-line \n    const [state, dispatch] = useStateValue();\n    const onLogin = () => {\n        auth.signInWithPopup(provider)\n        .then((result) => {\n            dispatch({\n                type: actionTypes.SET_USER,\n                user: result.user,\n            });\n        })\n        .catch(error => alert(error));\n    }\n    return (\n        <div className=\"Login\">\n            <div className=\"Login__Container\">\n                <img src=\"https://d34u8crftukxnk.cloudfront.net/slackpress/prod/sites/6/2019-01_BrandRefresh_Old-to-New-Final.gif\" alt=\"\"/>\n                <h1>Sigin to Ayar Hlaine Workspace</h1>\n                <p>ayarhlaine.slack.com</p>\n                <Button onClick={onLogin}>SIGIN IN WITH GOOGLE</Button>\n            </div>\n        </div>\n    )\n}\n\nexport default Login\n","import React from 'react';\nimport './App.scss';\nimport Header from './Header/Header';\nimport AppBody from './AppBody/AppBody';\nimport { BrowserRouter as Router, Switch} from 'react-router-dom';\nimport Login from './Login/Login';\nimport { useStateValue } from './Provider';\nfunction App() {\n  const [{ user }] = useStateValue();\n  return (\n    <div className=\"App\">\n      {\n        !user ?\n        <Login />\n        :\n        <>\n        <Header />\n        <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n            <AppBody />\n          </Switch>\n        </Router>\n        </>\n      }\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport reducer, { initialState } from './reducer';\nimport { StateProvider } from './Provider';\n\nReactDOM.render(\n  <React.StrictMode>\n    <StateProvider reducer={reducer} initialState={initialState}>\n      <App />\n    </StateProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}